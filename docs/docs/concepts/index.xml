<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concepts on KubeFleet</title>
    <link>https://kubefleet-dev.github.io/website/docs/concepts/</link>
    <description>Recent content in Concepts on KubeFleet</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kubefleet-dev.github.io/website/docs/concepts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ClusterResourcePlacement</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/crpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/crpc/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ClusterResourcePlacement&lt;/code&gt; concept is used to dynamically select cluster scoped resources (especially namespaces and all&#xA;objects within it) and control how they are propagated to all or a subset of the member clusters.&#xA;A &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; mainly consists of three parts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Resource selection&lt;/strong&gt;: select which cluster-scoped Kubernetes&#xA;resource objects need to be propagated from the hub cluster to selected member clusters.&lt;/p&gt;&#xA;&lt;p&gt;It supports the following forms of resource selection:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select resources by specifying just the &amp;lt;group, version, kind&amp;gt;. This selection propagates all resources with matching &amp;lt;group, version, kind&amp;gt;.&lt;/li&gt;&#xA;&lt;li&gt;Select resources by specifying the &amp;lt;group, version, kind&amp;gt; and name. This selection propagates only one resource that matches the &amp;lt;group, version, kind&amp;gt; and name.&lt;/li&gt;&#xA;&lt;li&gt;Select resources by specifying the &amp;lt;group, version, kind&amp;gt; and a set of labels using ClusterResourcePlacement -&amp;gt; LabelSelector.&#xA;This selection propagates all resources that match the &amp;lt;group, version, kind&amp;gt; and label specified.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a namespace is selected, all the namespace-scoped objects under this namespace are propagated to the&#xA;selected member clusters along with this namespace.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fleet components</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/components/</guid>
      <description>&lt;h1 id=&#34;components&#34;&gt;Components&lt;/h1&gt;&#xA;&lt;p&gt;This document provides an overview of the components required for a fully functional and operational Fleet setup.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kubefleet-dev.github.io/website/images/en/docs/concepts/components/architecture.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The fleet consists of the following components:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fleet-hub-agent is a Kubernetes controller that creates and reconciles all the fleet related CRs in the hub cluster.&lt;/li&gt;&#xA;&lt;li&gt;fleet-member-agent is a Kubernetes controller that creates and reconciles all the fleet related CRs in the member cluster.&#xA;The fleet-member-agent is pulling the latest CRs from the hub cluster and consistently reconciles the member clusters to&#xA;the desired state.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The fleet implements agent-based pull mode. So that the working pressure can be distributed to the member clusters, and it&#xA;helps to breach the bottleneck of scalability, by dividing the load into each member cluster. On the other hand, hub&#xA;cluster does not need to directly access to the member clusters. Fleet can support the member clusters which only have&#xA;the outbound network and no inbound network access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>MemberCluster</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/membercluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/membercluster/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The fleet constitutes an implementation of a &lt;a href=&#34;https://multicluster.sigs.k8s.io/api-types/cluster-set/&#34;&gt;&lt;code&gt;ClusterSet&lt;/code&gt;&lt;/a&gt; and&#xA;encompasses the following attributes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A collective of clusters managed by a centralized authority.&lt;/li&gt;&#xA;&lt;li&gt;Typically characterized by a high level of mutual trust within the cluster set.&lt;/li&gt;&#xA;&lt;li&gt;Embraces the principle of Namespace Sameness across clusters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ensures uniform permissions and characteristics for a given namespace across all clusters.&lt;/li&gt;&#xA;&lt;li&gt;While not mandatory for every cluster, namespaces exhibit consistent behavior across those where they are present.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The &lt;code&gt;MemberCluster&lt;/code&gt; represents a cluster-scoped API established within the hub cluster, serving as a representation of&#xA;a cluster within the fleet. This API offers a dependable, uniform, and automated approach for multi-cluster applications&#xA;(frameworks, toolsets) to identify registered clusters within a fleet. Additionally, it facilitates applications in querying&#xA;a list of clusters managed by the fleet or observing cluster statuses for subsequent actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheduler</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/scheduler/</guid>
      <description>&lt;p&gt;The scheduler component is a vital element in Fleet workload scheduling. Its primary responsibility is to determine the&#xA;schedule decision for a bundle of resources based on the latest &lt;code&gt;ClusterSchedulingPolicySnapshot&lt;/code&gt;generated by the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;.&#xA;By default, the scheduler operates in batch mode, which enhances performance. In this mode, it binds a &lt;code&gt;ClusterResourceBinding&lt;/code&gt;&#xA;from a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; to multiple clusters whenever possible.&lt;/p&gt;&#xA;&lt;h2 id=&#34;batch-in-nature&#34;&gt;Batch in nature&lt;/h2&gt;&#xA;&lt;p&gt;Scheduling resources within a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; involves more dependencies compared with scheduling pods within&#xA;a deployment in Kubernetes. There are two notable distinctions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheduling Framework</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/scheduling-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/scheduling-framework/</guid>
      <description>&lt;p&gt;The fleet scheduling framework closely aligns with the native &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/&#34;&gt;Kubernetes scheduling framework&lt;/a&gt;,&#xA;incorporating several modifications and tailored functionalities.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kubefleet-dev.github.io/website/images/en/docs/concepts/scheduling-framework/scheduling-framework.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The primary advantage of this framework lies in its capability to compile plugins directly into the scheduler. Its API&#xA;facilitates the implementation of diverse scheduling features as plugins, thereby ensuring a lightweight and maintainable&#xA;core.&lt;/p&gt;&#xA;&lt;p&gt;The fleet scheduler integrates three fundamental built-in plugin types:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Topology Spread Plugin&lt;/strong&gt;: Supports the TopologySpreadConstraints stipulated in the placement policy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cluster Affinity Plugin&lt;/strong&gt;: Facilitates the Affinity clause of the placement policy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Same Placement Affinity Plugin&lt;/strong&gt;: Uniquely designed for the fleet, preventing multiple replicas (selected resources) from&#xA;being placed within the same cluster. This distinguishes it from Kubernetes, which allows multiple pods on a node.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cluster Eligibility Plugin&lt;/strong&gt;: Enables cluster selection based on specific status criteria.&lt;/li&gt;&#xA;&lt;li&gt;** Taint &amp;amp; Toleration Plugin**: Enables cluster selection based on taints on the cluster &amp;amp; tolerations on the ClusterResourcePlacement.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Compared to the Kubernetes scheduling framework, the fleet framework introduces additional stages for the pickN placement type:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Properties and Property Provides</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/properties/</guid>
      <description>&lt;p&gt;This document explains the concepts of property provider and cluster properties in Fleet.&lt;/p&gt;&#xA;&lt;p&gt;Fleet allows developers to implement a property provider to expose arbitrary properties about&#xA;a member cluster, such as its node count and available resources for workload placement. Platforms&#xA;could also enable their property providers to expose platform-specific properties via Fleet.&#xA;These properties can be useful in a variety of cases: for example, administrators could monitor the&#xA;health of a member cluster using related properties; Fleet also supports making scheduling&#xA;decisions based on the property data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Safe Rollout</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/safe-rollout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/safe-rollout/</guid>
      <description>&lt;p&gt;One of the most important features of Fleet is the ability to safely rollout changes across multiple clusters. We do&#xA;this by rolling out the changes in a controlled manner, ensuring that we only continue to propagate the changes to the&#xA;next target clusters if the resources are successfully applied to the previous target clusters.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;We automatically propagate any resource changes that are selected by a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; from the hub cluster&#xA;to the target clusters based on the placement policy defined in the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;. In order to reduce the&#xA;blast radius of such operation, we provide users a way to safely rollout the new changes so that a bad release&#xA;won&amp;rsquo;t affect all the running instances all at once.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Override</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/override/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/override/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;ClusterResourceOverride&lt;/code&gt; and &lt;code&gt;ResourceOverride&lt;/code&gt; provides a way to customize resource configurations before they are propagated&#xA;to the target cluster by the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;difference-between-clusterresourceoverride-and-resourceoverride&#34;&gt;Difference Between &lt;code&gt;ClusterResourceOverride&lt;/code&gt; And &lt;code&gt;ResourceOverride&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ClusterResourceOverride&lt;/code&gt; represents the cluster-wide policy that overrides the cluster scoped resources to one or more&#xA;clusters while &lt;code&gt;ResourceOverride&lt;/code&gt; will apply to resources in the same namespace as the namespace-wide policy.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If a namespace is selected by the &lt;code&gt;ClusterResourceOverride&lt;/code&gt;, ALL the resources under the namespace are selected&#xA;automatically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Staged Update</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/staged-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/staged-update/</guid>
      <description>&lt;p&gt;While users rely on the &lt;code&gt;RollingUpdate&lt;/code&gt; rollout strategy to safely roll out their workloads,&#xA;there is also a requirement for a staged rollout mechanism at the cluster level to enable more controlled and systematic continuous delivery (CD) across the fleet.&#xA;Introducing a staged update run feature would address this need by enabling gradual deployments, reducing risk, and ensuring greater reliability and consistency in workload updates across clusters.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kubefleet-dev.github.io/website/images/en/docs/concepts/staged-update/updaterun.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;We introduce two new Custom Resources, &lt;code&gt;ClusterStagedUpdateStrategy&lt;/code&gt; and &lt;code&gt;ClusterStagedUpdateRun&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eviction and Placement Disruption Budget</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/eviction-pdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/eviction-pdb/</guid>
      <description>&lt;p&gt;This document explains the concept of &lt;code&gt;Eviction&lt;/code&gt; and &lt;code&gt;Placement Disruption Budget&lt;/code&gt; in the context of the fleet.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Eviction&lt;/code&gt; provides a way to force remove resources from a target cluster once the resources have already been propagated from the hub cluster by a &lt;code&gt;Placement&lt;/code&gt; object.&#xA;&lt;code&gt;Eviction&lt;/code&gt; is considered as an voluntary disruption triggered by the user. &lt;code&gt;Eviction&lt;/code&gt; alone doesn&amp;rsquo;t guarantee that resources won&amp;rsquo;t be propagated to target cluster again by the scheduler.&#xA;The users need to use &lt;a href=&#34;../howtos/taint-toleration.md&#34;&gt;taints&lt;/a&gt; in conjunction with &lt;code&gt;Eviction&lt;/code&gt; to prevent the scheduler from picking the target cluster again.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

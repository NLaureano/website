<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KubeFleet</title>
    <link>https://kubefleet-dev.github.io/website/</link>
    <description>Recent content on KubeFleet</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kubefleet-dev.github.io/website/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Managing clusters</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/clusters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/clusters/</guid>
      <description>&lt;p&gt;This how-to guide discusses how to manage clusters in a fleet, specifically:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;how to join a cluster into a fleet; and&lt;/li&gt;&#xA;&lt;li&gt;how to set a cluster to leave a fleet; and&lt;/li&gt;&#xA;&lt;li&gt;how to add labels to a member cluster&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;joining-a-cluster-into-a-fleet&#34;&gt;Joining a cluster into a fleet&lt;/h2&gt;&#xA;&lt;p&gt;A cluster can join in a fleet if:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;it runs a supported Kubernetes version; it is recommended that you use Kubernetes 1.24 or later&#xA;versions, and&lt;/li&gt;&#xA;&lt;li&gt;it has network connectivity to the hub cluster of the fleet.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For your convenience, Fleet provides a script that can automate the process of joining a cluster&#xA;into a fleet. To use the script, run the commands below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>ClusterResourcePlacement</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/crpc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/crpc/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ClusterResourcePlacement&lt;/code&gt; concept is used to dynamically select cluster scoped resources (especially namespaces and all&#xA;objects within it) and control how they are propagated to all or a subset of the member clusters.&#xA;A &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; mainly consists of three parts:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Resource selection&lt;/strong&gt;: select which cluster-scoped Kubernetes&#xA;resource objects need to be propagated from the hub cluster to selected member clusters.&lt;/p&gt;&#xA;&lt;p&gt;It supports the following forms of resource selection:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Select resources by specifying just the &amp;lt;group, version, kind&amp;gt;. This selection propagates all resources with matching &amp;lt;group, version, kind&amp;gt;.&lt;/li&gt;&#xA;&lt;li&gt;Select resources by specifying the &amp;lt;group, version, kind&amp;gt; and name. This selection propagates only one resource that matches the &amp;lt;group, version, kind&amp;gt; and name.&lt;/li&gt;&#xA;&lt;li&gt;Select resources by specifying the &amp;lt;group, version, kind&amp;gt; and a set of labels using ClusterResourcePlacement -&amp;gt; LabelSelector.&#xA;This selection propagates all resources that match the &amp;lt;group, version, kind&amp;gt; and label specified.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a namespace is selected, all the namespace-scoped objects under this namespace are propagated to the&#xA;selected member clusters along with this namespace.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started with Fleet using KinD clusters</title>
      <link>https://kubefleet-dev.github.io/website/docs/getting-started/kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/getting-started/kind/</guid>
      <description>&lt;p&gt;In this tutorial, you will try Fleet out using&#xA;&lt;a href=&#34;https://kind.sigs.k8s.io/&#34;&gt;KinD&lt;/a&gt; clusters, which are Kubernetes clusters running on your own&#xA;local machine via &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; containers. This is the easiest way&#xA;to get started with Fleet, which can help you understand how Fleet simiplify the day-to-day multi-cluster management experience with very little setup needed.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note&lt;/p&gt;&#xA;&lt;p&gt;kind is a tool for setting up a Kubernetes environment for experimental purposes;&#xA;some instructions below for running Fleet in the kind environment may not apply to other&#xA;environments, and there might also be some minor differences in the Fleet&#xA;experience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using the ClusterResourcePlacement API</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/crp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/crp/</guid>
      <description>&lt;p&gt;This guide provides an overview of how to use the Fleet &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; (CRP) API to orchestrate workload distribution across your fleet.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The CRP API is a core Fleet API that facilitates the distribution of specific resources from the hub cluster to&#xA;member clusters within a fleet. This API offers scheduling capabilities that allow you to target the most suitable&#xA;group of clusters for a set of resources using a complex rule set. For example, you can distribute resources to&#xA;clusters in specific regions (North America, East Asia, Europe, etc.) and/or release stages (production, canary, etc.).&#xA;You can even distribute resources according to certain topology spread constraints.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fleet components</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/components/</guid>
      <description>&lt;h1 id=&#34;components&#34;&gt;Components&lt;/h1&gt;&#xA;&lt;p&gt;This document provides an overview of the components required for a fully functional and operational Fleet setup.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kubefleet-dev.github.io/website/images/en/docs/concepts/components/architecture.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The fleet consists of the following components:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;fleet-hub-agent is a Kubernetes controller that creates and reconciles all the fleet related CRs in the hub cluster.&lt;/li&gt;&#xA;&lt;li&gt;fleet-member-agent is a Kubernetes controller that creates and reconciles all the fleet related CRs in the member cluster.&#xA;The fleet-member-agent is pulling the latest CRs from the hub cluster and consistently reconciles the member clusters to&#xA;the desired state.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The fleet implements agent-based pull mode. So that the working pressure can be distributed to the member clusters, and it&#xA;helps to breach the bottleneck of scalability, by dividing the load into each member cluster. On the other hand, hub&#xA;cluster does not need to directly access to the member clusters. Fleet can support the member clusters which only have&#xA;the outbound network and no inbound network access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting started with Fleet using on-premises clusters</title>
      <link>https://kubefleet-dev.github.io/website/docs/getting-started/on-prem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/getting-started/on-prem/</guid>
      <description>&lt;p&gt;In this tutorial, you will try Fleet out using a few of your own Kubernetes clusters; Fleet can&#xA;help you manage workloads seamlessly across these clusters, greatly simplifying the experience&#xA;of day-to-day Kubernetes management.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note&lt;/p&gt;&#xA;&lt;p&gt;This tutorial assumes that you have some experience of performing administrative tasks for&#xA;Kubernetes clusters. If you are just gettings started with Kubernetes, or do not have much&#xA;experience of setting up a Kubernetes cluster, it is recommended that you follow the&#xA;&lt;a href=&#34;https://kubefleet-dev.github.io/website/docs/getting-started/kind/&#34;&gt;Getting started with Fleet using Kind clusters&lt;/a&gt; tutorial instead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Affinity to Pick Clusters</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/affinities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/affinities/</guid>
      <description>&lt;p&gt;This how-to guide discusses how to use affinity settings to fine-tune how Fleet picks clusters&#xA;for resource placement.&lt;/p&gt;&#xA;&lt;p&gt;Affinities terms are featured in the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; API, specifically the scheduling&#xA;policy section. Each affinity term is a particular requirement that Fleet will check against clusters;&#xA;and the fulfillment of this requirement (or the lack of) would have certain effect on whether&#xA;Fleet would pick a cluster for resource placement.&lt;/p&gt;&#xA;&lt;p&gt;Fleet currently supports two types of affinity terms:&lt;/p&gt;</description>
    </item>
    <item>
      <title>MemberCluster</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/membercluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/membercluster/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The fleet constitutes an implementation of a &lt;a href=&#34;https://multicluster.sigs.k8s.io/api-types/cluster-set/&#34;&gt;&lt;code&gt;ClusterSet&lt;/code&gt;&lt;/a&gt; and&#xA;encompasses the following attributes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A collective of clusters managed by a centralized authority.&lt;/li&gt;&#xA;&lt;li&gt;Typically characterized by a high level of mutual trust within the cluster set.&lt;/li&gt;&#xA;&lt;li&gt;Embraces the principle of Namespace Sameness across clusters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ensures uniform permissions and characteristics for a given namespace across all clusters.&lt;/li&gt;&#xA;&lt;li&gt;While not mandatory for every cluster, namespaces exhibit consistent behavior across those where they are present.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The &lt;code&gt;MemberCluster&lt;/code&gt; represents a cluster-scoped API established within the hub cluster, serving as a representation of&#xA;a cluster within the fleet. This API offers a dependable, uniform, and automated approach for multi-cluster applications&#xA;(frameworks, toolsets) to identify registered clusters within a fleet. Additionally, it facilitates applications in querying&#xA;a list of clusters managed by the fleet or observing cluster statuses for subsequent actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Topology Spread Constraints to Spread Resources</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/topology-spread-constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/topology-spread-constraints/</guid>
      <description>&lt;p&gt;This how-to guide discusses how to use topology spread constraints to fine-tune how Fleet picks&#xA;clusters for resource placement.&lt;/p&gt;&#xA;&lt;p&gt;Topology spread constraints are features in the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; API, specifically&#xA;the scheduling policy section. Generally speaking, these constraints can help you spread&#xA;resources evenly across different groups of clusters in your fleet; or in other words, it&#xA;assures that Fleet will not pick too many clusters from one group, and too little from another.&#xA;You can use topology spread constraints to, for example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheduler</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/scheduler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/scheduler/</guid>
      <description>&lt;p&gt;The scheduler component is a vital element in Fleet workload scheduling. Its primary responsibility is to determine the&#xA;schedule decision for a bundle of resources based on the latest &lt;code&gt;ClusterSchedulingPolicySnapshot&lt;/code&gt;generated by the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;.&#xA;By default, the scheduler operates in batch mode, which enhances performance. In this mode, it binds a &lt;code&gt;ClusterResourceBinding&lt;/code&gt;&#xA;from a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; to multiple clusters whenever possible.&lt;/p&gt;&#xA;&lt;h2 id=&#34;batch-in-nature&#34;&gt;Batch in nature&lt;/h2&gt;&#xA;&lt;p&gt;Scheduling resources within a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; involves more dependencies compared with scheduling pods within&#xA;a deployment in Kubernetes. There are two notable distinctions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Property-Based Scheduling</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/property-based-scheduling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/property-based-scheduling/</guid>
      <description>&lt;p&gt;This how-to guide discusses how to use property-based scheduling to produce scheduling decisions&#xA;based on cluster properties.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Note&lt;/p&gt;&#xA;&lt;p&gt;The availability of properties depend on which (and if) you have a property provider&#xA;set up in your Fleet deployment. For more information, see the&#xA;&lt;a href=&#34;https://kubefleet-dev.github.io/website/concepts/properties&#34;&gt;Concept: Property Provider and Cluster Properties&lt;/a&gt;&#xA;documentation.&lt;/p&gt;&#xA;&lt;p&gt;It is also recommended that you read the&#xA;&lt;a href=&#34;https://kubefleet-dev.github.io/website/docs/how-tos/affinities/&#34;&gt;How-To Guide: Using Affinity to Pick Clusters&lt;/a&gt; first before following&#xA;instructions in this document.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheduling Framework</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/scheduling-framework/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/scheduling-framework/</guid>
      <description>&lt;p&gt;The fleet scheduling framework closely aligns with the native &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/&#34;&gt;Kubernetes scheduling framework&lt;/a&gt;,&#xA;incorporating several modifications and tailored functionalities.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kubefleet-dev.github.io/website/images/en/docs/concepts/scheduling-framework/scheduling-framework.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The primary advantage of this framework lies in its capability to compile plugins directly into the scheduler. Its API&#xA;facilitates the implementation of diverse scheduling features as plugins, thereby ensuring a lightweight and maintainable&#xA;core.&lt;/p&gt;&#xA;&lt;p&gt;The fleet scheduler integrates three fundamental built-in plugin types:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Topology Spread Plugin&lt;/strong&gt;: Supports the TopologySpreadConstraints stipulated in the placement policy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cluster Affinity Plugin&lt;/strong&gt;: Facilitates the Affinity clause of the placement policy.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Same Placement Affinity Plugin&lt;/strong&gt;: Uniquely designed for the fleet, preventing multiple replicas (selected resources) from&#xA;being placed within the same cluster. This distinguishes it from Kubernetes, which allows multiple pods on a node.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Cluster Eligibility Plugin&lt;/strong&gt;: Enables cluster selection based on specific status criteria.&lt;/li&gt;&#xA;&lt;li&gt;** Taint &amp;amp; Toleration Plugin**: Enables cluster selection based on taints on the cluster &amp;amp; tolerations on the ClusterResourcePlacement.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Compared to the Kubernetes scheduling framework, the fleet framework introduces additional stages for the pickN placement type:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Taints and Tolerations</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/taints-tolerations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/taints-tolerations/</guid>
      <description>&lt;p&gt;This how-to guide discusses how to add/remove taints on &lt;code&gt;MemberCluster&lt;/code&gt; and how to add tolerations on &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;adding-taint-to-membercluster&#34;&gt;Adding taint to MemberCluster&lt;/h2&gt;&#xA;&lt;p&gt;In this example, we will add a taint to a &lt;code&gt;MemberCluster&lt;/code&gt;. Then try to propagate resources to the &lt;code&gt;MemberCluster&lt;/code&gt; using a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;&#xA;with &lt;strong&gt;PickAll&lt;/strong&gt; placement policy. The resources should not be propagated to the &lt;code&gt;MemberCluster&lt;/code&gt; because of the taint.&lt;/p&gt;&#xA;&lt;p&gt;We will first create a namespace that we will propagate to the member cluster,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Properties and Property Provides</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/properties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/properties/</guid>
      <description>&lt;p&gt;This document explains the concepts of property provider and cluster properties in Fleet.&lt;/p&gt;&#xA;&lt;p&gt;Fleet allows developers to implement a property provider to expose arbitrary properties about&#xA;a member cluster, such as its node count and available resources for workload placement. Platforms&#xA;could also enable their property providers to expose platform-specific properties via Fleet.&#xA;These properties can be useful in a variety of cases: for example, administrators could monitor the&#xA;health of a member cluster using related properties; Fleet also supports making scheduling&#xA;decisions based on the property data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using the ClusterResourceOverride API</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/cluster-resource-override/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/cluster-resource-override/</guid>
      <description>&lt;p&gt;This guide provides an overview of how to use the Fleet &lt;code&gt;ClusterResourceOverride&lt;/code&gt; API to override cluster resources.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ClusterResourceOverride&lt;/code&gt; is a feature within Fleet that allows for the modification or override of specific attributes&#xA;across cluster-wide resources. With ClusterResourceOverride, you can define rules based on cluster labels or other&#xA;criteria, specifying changes to be applied to various cluster-wide resources such as namespaces, roles, role bindings,&#xA;or custom resource definitions. These modifications may include updates to permissions, configurations, or other&#xA;parameters, ensuring consistent management and enforcement of configurations across your Fleet-managed Kubernetes clusters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Safe Rollout</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/safe-rollout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/safe-rollout/</guid>
      <description>&lt;p&gt;One of the most important features of Fleet is the ability to safely rollout changes across multiple clusters. We do&#xA;this by rolling out the changes in a controlled manner, ensuring that we only continue to propagate the changes to the&#xA;next target clusters if the resources are successfully applied to the previous target clusters.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;We automatically propagate any resource changes that are selected by a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; from the hub cluster&#xA;to the target clusters based on the placement policy defined in the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;. In order to reduce the&#xA;blast radius of such operation, we provide users a way to safely rollout the new changes so that a bad release&#xA;won&amp;rsquo;t affect all the running instances all at once.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using the ResourceOverride API</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/resource-override/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/resource-override/</guid>
      <description>&lt;p&gt;This guide provides an overview of how to use the Fleet &lt;code&gt;ResourceOverride&lt;/code&gt; API to override resources.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ResourceOverride&lt;/code&gt; is a Fleet API that allows you to modify or override specific attributes of&#xA;existing resources within your cluster. With ResourceOverride, you can define rules based on cluster&#xA;labels or other criteria, specifying changes to be applied to resources such as Deployments, StatefulSets, ConfigMaps, or Secrets.&#xA;These changes can include updates to container images, environment variables, resource limits, or any other configurable parameters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Override</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/override/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/override/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;ClusterResourceOverride&lt;/code&gt; and &lt;code&gt;ResourceOverride&lt;/code&gt; provides a way to customize resource configurations before they are propagated&#xA;to the target cluster by the &lt;code&gt;ClusterResourcePlacement&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;difference-between-clusterresourceoverride-and-resourceoverride&#34;&gt;Difference Between &lt;code&gt;ClusterResourceOverride&lt;/code&gt; And &lt;code&gt;ResourceOverride&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;ClusterResourceOverride&lt;/code&gt; represents the cluster-wide policy that overrides the cluster scoped resources to one or more&#xA;clusters while &lt;code&gt;ResourceOverride&lt;/code&gt; will apply to resources in the same namespace as the namespace-wide policy.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If a namespace is selected by the &lt;code&gt;ClusterResourceOverride&lt;/code&gt;, ALL the resources under the namespace are selected&#xA;automatically.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Envelope Objects to Place Resources</title>
      <link>https://kubefleet-dev.github.io/website/docs/how-tos/envelope-object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/how-tos/envelope-object/</guid>
      <description>&lt;h2 id=&#34;propagating-resources-with-envelope-objects&#34;&gt;Propagating Resources with Envelope Objects&lt;/h2&gt;&#xA;&lt;p&gt;This guide provides instructions on propagating a set of resources from the hub cluster to joined member clusters within an envelope object.&lt;/p&gt;&#xA;&lt;h2 id=&#34;envelope-object-with-configmap&#34;&gt;Envelope Object with ConfigMap&lt;/h2&gt;&#xA;&lt;p&gt;Currently, we support using a &lt;code&gt;ConfigMap&lt;/code&gt; as an envelope object by leveraging a fleet-reserved annotation.&lt;/p&gt;&#xA;&lt;p&gt;To designate a &lt;code&gt;ConfigMap&lt;/code&gt; as an envelope object, ensure that it contains the following annotation:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;annotations&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kubernetes-fleet.io/envelope-configmap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;example-configmap-envelope-object&#34;&gt;Example ConfigMap Envelope Object:&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: v1&#xA;kind: ConfigMap&#xA;metadata:&#xA;  name: envelope-configmap&#xA;  namespace: app&#xA;  annotations:&#xA;    kubernetes-fleet.io/envelope-configmap: &amp;#34;true&amp;#34;&#xA;data:&#xA;  resourceQuota.yaml: |&#xA;    apiVersion: v1&#xA;    kind: ResourceQuota&#xA;    metadata:&#xA;      name: mem-cpu-demo&#xA;      namespace: app&#xA;    spec:&#xA;      hard:&#xA;        requests.cpu: &amp;#34;1&amp;#34;&#xA;        requests.memory: 1Gi&#xA;        limits.cpu: &amp;#34;2&amp;#34;&#xA;        limits.memory: 2Gi&#xA;  webhook.yaml: |&#xA;    apiVersion: admissionregistration.k8s.io/v1&#xA;    kind: MutatingWebhookConfiguration&#xA;    metadata:&#xA;      creationTimestamp: null&#xA;      labels:&#xA;        azure-workload-identity.io/system: &amp;#34;true&amp;#34;&#xA;      name: azure-wi-webhook-mutating-webhook-configuration&#xA;    webhooks:&#xA;    - admissionReviewVersions:&#xA;      - v1&#xA;      - v1beta1&#xA;      clientConfig:&#xA;        service:&#xA;          name: azure-wi-webhook-webhook-service&#xA;          namespace: app&#xA;          path: /mutate-v1-pod&#xA;      failurePolicy: Fail&#xA;      matchPolicy: Equivalent&#xA;      name: mutation.azure-workload-identity.io&#xA;      rules:&#xA;      - apiGroups:&#xA;        - &amp;#34;&amp;#34;&#xA;        apiVersions:&#xA;        - v1&#xA;        operations:&#xA;        - CREATE&#xA;        - UPDATE&#xA;        resources:&#xA;        - pods&#xA;      sideEffects: None&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;propagating-an-envelope-configmap-from-hub-cluster-to-member-cluster&#34;&gt;Propagating an Envelope ConfigMap from Hub cluster to Member cluster:&lt;/h2&gt;&#xA;&lt;p&gt;We will now apply the example envelope object above on our hub cluster. Then we use a &lt;code&gt;ClusterResourcePlacement&lt;/code&gt; object to propagate the resource from hub to a member cluster named &lt;code&gt;kind-cluster-1&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Staged Update</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/staged-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/staged-update/</guid>
      <description>&lt;p&gt;While users rely on the &lt;code&gt;RollingUpdate&lt;/code&gt; rollout strategy to safely roll out their workloads,&#xA;there is also a requirement for a staged rollout mechanism at the cluster level to enable more controlled and systematic continuous delivery (CD) across the fleet.&#xA;Introducing a staged update run feature would address this need by enabling gradual deployments, reducing risk, and ensuring greater reliability and consistency in workload updates across clusters.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://kubefleet-dev.github.io/website/images/en/docs/concepts/staged-update/updaterun.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;We introduce two new Custom Resources, &lt;code&gt;ClusterStagedUpdateStrategy&lt;/code&gt; and &lt;code&gt;ClusterStagedUpdateRun&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Eviction and Placement Disruption Budget</title>
      <link>https://kubefleet-dev.github.io/website/docs/concepts/eviction-pdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kubefleet-dev.github.io/website/docs/concepts/eviction-pdb/</guid>
      <description>&lt;p&gt;This document explains the concept of &lt;code&gt;Eviction&lt;/code&gt; and &lt;code&gt;Placement Disruption Budget&lt;/code&gt; in the context of the fleet.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Eviction&lt;/code&gt; provides a way to force remove resources from a target cluster once the resources have already been propagated from the hub cluster by a &lt;code&gt;Placement&lt;/code&gt; object.&#xA;&lt;code&gt;Eviction&lt;/code&gt; is considered as an voluntary disruption triggered by the user. &lt;code&gt;Eviction&lt;/code&gt; alone doesn&amp;rsquo;t guarantee that resources won&amp;rsquo;t be propagated to target cluster again by the scheduler.&#xA;The users need to use &lt;a href=&#34;../howtos/taint-toleration.md&#34;&gt;taints&lt;/a&gt; in conjunction with &lt;code&gt;Eviction&lt;/code&gt; to prevent the scheduler from picking the target cluster again.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
